!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALGORITHM_H	algorithm.h	2;"	d
Algorithm	algorithm.h	/^			Algorithm(const char *file_name) : $/;"	f	class:pagerank::Algorithm
Algorithm	algorithm.h	/^	class Algorithm {$/;"	c	namespace:pagerank
GRAPH_H	graph.h	2;"	d
Graph	graph.h	/^			Graph() : id(0) {};$/;"	f	class:pagerank::Graph
Graph	graph.h	/^	class Graph {$/;"	c	namespace:pagerank
Vertice	graph.h	/^	typedef std::vector<struct vertex_t> Vertice;$/;"	t	namespace:pagerank
_m_beta	algorithm.h	/^			double _m_beta;$/;"	m	class:pagerank::Algorithm
_m_degree	graph.h	/^			std::vector<size_t> _m_degree;$/;"	m	class:pagerank::Graph
_m_epsilion	algorithm.h	/^			double _m_epsilion;$/;"	m	class:pagerank::Algorithm
_m_file_name	algorithm.h	/^			const char *_m_file_name;$/;"	m	class:pagerank::Algorithm
_m_matrix_m	algorithm.h	/^			Graph _m_matrix_m;$/;"	m	class:pagerank::Algorithm
_m_pr	algorithm.h	/^			std::vector<double> _m_pr;$/;"	m	class:pagerank::Algorithm
_m_r	algorithm.h	/^			std::vector<double> _m_r;$/;"	m	class:pagerank::Algorithm
_m_vertice	graph.h	/^			Vertice _m_vertice;$/;"	m	class:pagerank::Graph
clear	graph.h	/^			void clear()$/;"	f	class:pagerank::Graph
edge_t	graph.h	/^	struct edge_t {$/;"	s	namespace:pagerank
edges	graph.h	/^		std::vector<struct edge_t> edges;$/;"	m	struct:pagerank::vertex_t
file_name	main.cc	/^const char* file_name = "..\/data\/web-Google.txt";$/;"	v
from	graph.h	/^		int from;$/;"	m	struct:pagerank::edge_t
get_degree	graph.h	/^			const std::vector<size_t>& get_degree()$/;"	f	class:pagerank::Graph
get_id	graph.h	/^			uint32_t get_id() const$/;"	f	class:pagerank::Graph
get_r	algorithm.h	/^			std::vector<double> get_r() {};$/;"	f	class:pagerank::Algorithm
get_vertex	graph.h	/^			const struct vertex_t& get_vertex(size_t idx) const {$/;"	f	class:pagerank::Graph
get_vertex	graph.h	/^			struct vertex_t& get_vertex(size_t idx) {$/;"	f	class:pagerank::Graph
id	graph.h	/^			int id;$/;"	m	class:pagerank::Graph
id	graph.h	/^		int id;		$/;"	m	struct:pagerank::vertex_t
main	main.cc	/^int main()$/;"	f
pagerank	algorithm.cc	/^namespace pagerank {$/;"	n	file:
pagerank	algorithm.h	/^namespace pagerank {$/;"	n
pagerank	graph.h	/^namespace pagerank {$/;"	n
power_iterate	algorithm.cc	/^	void power_iterate()$/;"	f	namespace:pagerank
read_input	algorithm.cc	/^	void read_input(const char* _m_file_name)$/;"	f	namespace:pagerank
resize	graph.h	/^			void resize(size_t s)$/;"	f	class:pagerank::Graph
run	algorithm.cc	/^	void Algorithm::run()$/;"	f	class:pagerank::Algorithm
set_id	graph.h	/^			void set_id(uint32_t id) $/;"	f	class:pagerank::Graph
set_vertice	graph.h	/^			void set_vertice(const Vertice& vertice) $/;"	f	class:pagerank::Graph
size	graph.h	/^			size_t size() const$/;"	f	class:pagerank::Graph
sum_up	algorithm.cc	/^	bool inline sum_up()$/;"	f	namespace:pagerank
to	graph.h	/^		int to;$/;"	m	struct:pagerank::edge_t
vertex_t	graph.h	/^	struct vertex_t {$/;"	s	namespace:pagerank
